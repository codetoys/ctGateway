<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:等线;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"等线 Light";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"\@等线 Light";}
@font-face
	{font-family:"\@等线";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:0cm;
	line-height:115%;
	font-size:11.0pt;
	font-family:等线;}
h1
	{mso-style-link:"标题 1 字符";
	margin-top:24.0pt;
	margin-right:0cm;
	margin-bottom:4.0pt;
	margin-left:21.6pt;
	text-indent:-21.6pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:24.0pt;
	font-family:"等线 Light";
	color:#0F4761;
	font-weight:normal;}
h2
	{mso-style-link:"标题 2 字符";
	margin-top:8.0pt;
	margin-right:0cm;
	margin-bottom:4.0pt;
	margin-left:28.8pt;
	text-indent:-28.8pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:20.0pt;
	font-family:"等线 Light";
	color:#0F4761;
	font-weight:normal;}
h3
	{mso-style-link:"标题 3 字符";
	margin-top:8.0pt;
	margin-right:0cm;
	margin-bottom:4.0pt;
	margin-left:36.0pt;
	text-indent:-36.0pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"等线 Light";
	color:#0F4761;
	font-weight:normal;}
h4
	{mso-style-link:"标题 4 字符";
	margin-top:4.0pt;
	margin-right:0cm;
	margin-bottom:2.0pt;
	margin-left:43.2pt;
	text-indent:-43.2pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:等线;
	color:#0F4761;
	font-weight:normal;}
h5
	{mso-style-link:"标题 5 字符";
	margin-top:4.0pt;
	margin-right:0cm;
	margin-bottom:2.0pt;
	margin-left:50.4pt;
	text-indent:-50.4pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:等线;
	color:#0F4761;
	font-weight:normal;}
h6
	{mso-style-link:"标题 6 字符";
	margin-top:2.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:57.6pt;
	text-indent:-57.6pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:等线;
	color:#0F4761;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-link:"标题 7 字符";
	margin-top:2.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:64.8pt;
	text-indent:-64.8pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:等线;
	color:#595959;
	font-weight:bold;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-link:"标题 8 字符";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:72.0pt;
	text-indent:-72.0pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:等线;
	color:#595959;}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{mso-style-link:"标题 9 字符";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:79.2pt;
	text-indent:-79.2pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:等线;
	color:#595959;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:0cm;
	line-height:115%;
	font-size:11.0pt;
	font-family:等线;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:21.0pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:等线;}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:42.0pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:等线;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{mso-style-link:"标题 字符";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:4.0pt;
	margin-left:0cm;
	text-align:center;
	font-size:28.0pt;
	font-family:"等线 Light";
	letter-spacing:-.5pt;}
p.MsoTitleCxSpFirst, li.MsoTitleCxSpFirst, div.MsoTitleCxSpFirst
	{mso-style-link:"标题 字符";
	margin:0cm;
	text-align:center;
	font-size:28.0pt;
	font-family:"等线 Light";
	letter-spacing:-.5pt;}
p.MsoTitleCxSpMiddle, li.MsoTitleCxSpMiddle, div.MsoTitleCxSpMiddle
	{mso-style-link:"标题 字符";
	margin:0cm;
	text-align:center;
	font-size:28.0pt;
	font-family:"等线 Light";
	letter-spacing:-.5pt;}
p.MsoTitleCxSpLast, li.MsoTitleCxSpLast, div.MsoTitleCxSpLast
	{mso-style-link:"标题 字符";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:4.0pt;
	margin-left:0cm;
	text-align:center;
	font-size:28.0pt;
	font-family:"等线 Light";
	letter-spacing:-.5pt;}
a:link, span.MsoHyperlink
	{color:#467886;
	text-decoration:underline;}
p.MsoTocHeading, li.MsoTocHeading, div.MsoTocHeading
	{margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	line-height:107%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"等线 Light";
	color:#0F4761;}
span.1
	{mso-style-name:"标题 1 字符";
	mso-style-link:"标题 1";
	font-family:"等线 Light";
	color:#0F4761;}
span.2
	{mso-style-name:"标题 2 字符";
	mso-style-link:"标题 2";
	font-family:"等线 Light";
	color:#0F4761;}
span.3
	{mso-style-name:"标题 3 字符";
	mso-style-link:"标题 3";
	font-family:"等线 Light";
	color:#0F4761;}
span.a
	{mso-style-name:"标题 字符";
	mso-style-link:标题;
	font-family:"等线 Light";
	letter-spacing:-.5pt;}
.MsoChpDefault
	{font-size:11.0pt;
	font-family:等线;}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:115%;}
 /* Page Definitions */
 @page WordSection1
	{size:595.3pt 841.9pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	layout-grid:15.6pt;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=ZH-CN link="#467886" vlink="#96607D" style='word-wrap:break-word;
text-justify-trim:punctuation'>

<div class=WordSection1 style='layout-grid:15.6pt'>

<p class=MsoTitle>设备协议开发指南</p>

<p class=MsoTocHeading>目录</p>

<p class=MsoToc1><span lang=EN-US><a href="#_Toc197459672">1<span
style='color:windowtext;text-decoration:none'>     </span><span lang=EN-US><span
lang=EN-US>基本设计</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></p>

<p class=MsoToc2 style='margin-left:22.0pt'><span lang=EN-US><a
href="#_Toc197459673">1.1<span style='color:windowtext;text-decoration:none'>      </span><span
lang=EN-US><span lang=EN-US>设备接口和协议指针</span></span><span style='color:windowtext;
display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></p>

<p class=MsoToc2 style='margin-left:22.0pt'><span lang=EN-US><a
href="#_Toc197459674">1.2<span style='color:windowtext;text-decoration:none'>      </span><span
lang=EN-US><span lang=EN-US>自定义协议的发现和加载</span></span><span style='color:windowtext;
display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></p>

<p class=MsoToc2 style='margin-left:22.0pt'><span lang=EN-US><a
href="#_Toc197459675">1.3<span style='color:windowtext;text-decoration:none'>      </span><span
lang=EN-US><span lang=EN-US>示例代码</span></span><span style='color:windowtext;
display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>2</span></a></span></p>

<p class=MsoToc1><span lang=EN-US><a href="#_Toc197459676">2<span
style='color:windowtext;text-decoration:none'>     </span><span lang=EN-US><span
lang=EN-US>参考</span></span><span style='color:windowtext;display:none;
text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>2</span></a></span></p>

<p class=MsoToc2 style='margin-left:22.0pt'><span lang=EN-US><a
href="#_Toc197459677">2.1<span style='color:windowtext;text-decoration:none'>      </span><span
lang=EN-US><span lang=EN-US>框架的配置结构</span></span><span style='color:windowtext;
display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>2</span></a></span></p>

<p class=MsoToc3 style='margin-left:44.0pt'><span lang=EN-US><a
href="#_Toc197459678">2.1.1<span style='color:windowtext;text-decoration:none'>       </span>InterfaceDeviceConfig<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>2</span></a></span></p>

<p class=MsoToc3 style='margin-left:44.0pt'><span lang=EN-US><a
href="#_Toc197459679">2.1.2<span style='color:windowtext;text-decoration:none'>       </span><span
lang=EN-US><span lang=EN-US>协议服务ProtocolSvr</span></span><span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>3</span></a></span></p>

<p class=MsoToc3 style='margin-left:44.0pt'><span lang=EN-US><a
href="#_Toc197459680">2.1.3<span style='color:windowtext;text-decoration:none'>       </span>Device<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc3 style='margin-left:44.0pt'><span lang=EN-US><a
href="#_Toc197459681">2.1.4<span style='color:windowtext;text-decoration:none'>       </span>Channel<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>8</span></a></span></p>

<p class=MsoToc2 style='margin-left:22.0pt'><span lang=EN-US><a
href="#_Toc197459682">2.2<span style='color:windowtext;text-decoration:none'>      </span>IProtocol<span
lang=EN-US><span lang=EN-US>协议接口</span></span><span style='color:windowtext;
display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>15</span></a></span></p>

<p class=MsoToc3 style='margin-left:44.0pt'><span lang=EN-US><a
href="#_Toc197459683">2.2.1<span style='color:windowtext;text-decoration:none'>       </span><span
lang=EN-US><span lang=EN-US>概述</span></span><span style='color:windowtext;
display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>15</span></a></span></p>

<p class=MsoToc3 style='margin-left:44.0pt'><span lang=EN-US><a
href="#_Toc197459684">2.2.2<span style='color:windowtext;text-decoration:none'>       </span><span
lang=EN-US><span lang=EN-US>自定义参数</span></span><span style='color:windowtext;
display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>16</span></a></span></p>

<p class=MsoToc3 style='margin-left:44.0pt'><span lang=EN-US><a
href="#_Toc197459685">2.2.3<span style='color:windowtext;text-decoration:none'>       </span>IProtocolParam<span
style='color:windowtext;display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>17</span></a></span></p>

<p class=MsoToc3 style='margin-left:44.0pt'><span lang=EN-US><a
href="#_Toc197459686">2.2.4<span style='color:windowtext;text-decoration:none'>       </span>IDeviceParam<span
style='color:windowtext;display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>18</span></a></span></p>

<p class=MsoToc3 style='margin-left:44.0pt'><span lang=EN-US><a
href="#_Toc197459687">2.2.5<span style='color:windowtext;text-decoration:none'>       </span>IChannelParam<span
style='color:windowtext;display:none;text-decoration:none'>... </span><span
style='color:windowtext;display:none;text-decoration:none'>18</span></a></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h1><a name="_Toc197459672"><span lang=EN-US>1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>基本设计</a></h1>

<h2><a name="_Toc197459673"><span lang=EN-US>1.1<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>设备接口和协议指针</a></h2>

<p class=MsoNormal style='text-indent:21.0pt'>每个设备接口（代码中称为<span lang=EN-US>Interface</span>）包含一个协议指针，指向<span
lang=EN-US>ProtocolSvr</span>对象，该指针在加载配置时根据配置的协议创建。</p>

<p class=MsoNormal style='text-indent:21.0pt'>目前内置协议如果多个设备接口使用同一个协议，并不会共享协议对象。当然这仅仅是因为这些协议没什么需要共享的数据，如果有必要，多个设备接口共享一个协议对象甚至不同协议共享协议对象都是没有问题的。</p>

<p class=MsoNormal style='text-indent:21.0pt'>每个设备接口只有一个协议指针，因此这个设备接口下的所有设备都只能是同一个协议。一个设备接口下多个设备的情形通常是串口之类的总线结构，总线上的所有设备具有相同的协议和通讯参数。特殊情况下编写一个复杂协议使用不同参数交替读取不同设备也是可能的。</p>

<h2><a name="_Toc197459674"><span lang=EN-US>1.2<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>自定义协议的发现和加载</a></h2>

<p class=MsoNormal style='text-indent:21.0pt'>自定义协议以动态库的方式实现，程序扫描所有特定前缀的动态库加载所需的协议。</p>

<p class=MsoNormal style='text-indent:21.0pt'>动态库所需提供的入口点是“<span lang=EN-US>CreateIProtocol</span>”，声明位于“<span
lang=EN-US>interface/IProtocol.h</span>”，声明如下：</p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>extern &quot;C&quot;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>{</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>协议驱动提供此接口以便主程序获得协议对象指针</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       DLL_PUBLIC
IProtocol* CreateIProtocol(char const* ProtocolCode);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>}</span></p>

<p class=MsoNormal style='text-indent:21.0pt'>很显然，所有的秘密都藏在<span lang=EN-US>IProtocol</span>里。</p>

<h2><a name="_Toc197459675"><span lang=EN-US>1.3<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>示例代码</a></h2>

<p class=MsoNormal style='margin-left:21.0pt'><span lang=EN-US>gwprocotol</span>目录下面是示例协议，其功能与隧道协议相同。</p>

<p class=MsoNormal><span lang=EN-US><img width=372 height=201 id="图片 1"
src="ctGateway_DeviceProtocolDevelopmentGuide.files/image001.png"
alt="图形用户界面, 文本, 应用程序&#10;&#10;AI 生成的内容可能不正确。"></span></p>

<p class=MsoNormal style='margin-left:21.0pt'>参照或修改此代码实现自定义协议。</p>

<h1><a name="_Toc197459676"><span lang=EN-US>2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>参考</a></h1>

<h2><a name="_Toc197459677"><span lang=EN-US>2.1<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>框架的配置结构</a></h2>

<h3><a name="_Toc197459678"><span lang=EN-US>2.1.1<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=EN-US>InterfaceDeviceConfig</span></a></h3>

<p class=MsoNormal style='margin-left:21.0pt'>一个设备接口的配置，包含多个设备。结构如下：</p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>struct
InterfaceDeviceConfig</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>{</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       string
protocolCode;//MODBUS</span><span style='color:#00B0F0'>，<span lang=EN-US>OPCUA</span>，<span
lang=EN-US>DLT645</span>，<span lang=EN-US>S7</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       string
interfaceCode;//</span><span style='color:#00B0F0'>接口名</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       vector&lt;Device*
&gt; devices;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       ProtocolSvr*
_ProtocolSvr = nullptr;//</span><span style='color:#00B0F0'>运行时协议服务</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       InterfaceState
_InterfaceState = InterfaceState::DEFAULT;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       string
ToString(bool withDetail = true)const;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       string
AllDeviceName()const</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              stringstream
ss;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              for
(auto&amp; v : devices)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     ss
&lt;&lt; v-&gt;deviceCode &lt;&lt; &quot;;&quot;;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              return
ss.str();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>};</span></p>

<p class=MsoNormal><span lang=EN-US>       </span>结构相当简单，主要包含了设备数组和协议服务指针。</p>

<h3><a name="_Toc197459679"><span lang=EN-US>2.1.2<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>协议服务<span lang=EN-US>ProtocolSvr</span></a></h3>

<p class=MsoNormal style='text-indent:21.0pt'>协议服务不是接口，是一个执行框架，以一个协议接口为参数，调用协议接口执行协议处理。</p>

<p class=MsoNormal style='text-indent:21.0pt'>协议服务定义如下：</p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>class ProtocolSvr :
private IWorkThread</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>{</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>private://IWorkThread</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual void
worker_job()override { pIProtocol-&gt;protocol_process_job(); }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual void
timer_job()override { pIProtocol-&gt;protocol_process_timer_job(); }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       CWorkerThread
m_WorkThread;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>private:</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       IProtocol*
pIProtocol;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>public:</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       ProtocolSvr(IProtocol
* p):pIProtocol(p){}</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       IProtocol*
getIProtocol()</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              return
pIProtocol;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       string
getProtocolCode()const { return pIProtocol-&gt;m_ProtocolCode; }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       bool
isSerialPort()const { return pIProtocol-&gt;m_isSerialPort; }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>启动</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       bool
StartProtocolSvr();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>激活</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       void
ProtoSvrActive()</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              m_WorkThread.ActiveWorkerThread();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>};</span></p>

<p class=MsoNormal><span lang=EN-US>       </span>这是一个定时循环加手动触发的线程框架。</p>

<h3><a name="_Toc197459680"><span lang=EN-US>2.1.3<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=EN-US>Device</span></a></h3>

<p class=MsoNormal style='margin-left:21.0pt'>设备对象，这是主要的对象，有很多属性，包含一组通道。定义如下：</p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>//</span><span
style='color:#00B0F0'>设备</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>struct Device</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>{</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       Device(IDeviceParam*
p) :deviceParam(p) {}</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       string deviceCode;//</span><span
style='color:#00B0F0'>设备的代码，唯一标识一个设备，跨越接口的唯一</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       int rate =
0;//</span><span style='color:#00B0F0'>每多少毫秒采集一次，此值不能高于所有通道设置的值</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       IDeviceParam*
deviceParam;//</span><span style='color:#00B0F0'>设备参数，与协议相关</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       vector&lt;Channel*&gt;
channels;//</span><span style='color:#00B0F0'>设备的通道</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       LockedList&lt;WriteInfo
&gt; writeList;//</span><span style='color:#00B0F0'>待写入的列表</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       DeviceState
_DeviceState = DeviceState::DEFAULT;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       int _rate =
0;//</span><span style='color:#00B0F0'>实际使用的值，由数采服务设置</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       CMyTime
_allTime;//</span><span style='color:#00B0F0'>上次全部采集的时间</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       string
_events;//</span><span style='color:#00B0F0'>未处理的事件，目前仅有变化全部上传</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       Channel*
FindByChannelNo(int channelNo)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              for
(auto&amp; c : channels)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     if
(c-&gt;channelNo == channelNo)return c;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              return
NULL;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       Channel*
FindByParamCode(char const* paramCode)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              for
(auto&amp; c : channels)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     if
(c-&gt;paramCode == paramCode)return c;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              return
NULL;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       void
ToTable(string const&amp; protocolCode, CHtmlDoc::CHtmlTable2&amp; table, bool
bEdit)const</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.SetTitle(this-&gt;deviceCode.c_str());</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              if (0
== channels.size())</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     //</span><span
style='color:#00B0F0'>由于不知道实际结构，只显示标准表头</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     Channel
tmp(NULL);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     tmp.AddHtmlTalbeCols(protocolCode,
table, bEdit);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              else</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     channels[0]-&gt;AddHtmlTalbeCols(protocolCode,
table, bEdit);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     for
(auto v : channels)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                            table.AddLine();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                            v-&gt;AddToHtmlTableLine(protocolCode,
table, bEdit);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       string
ToString(string const&amp; protocolCode, bool withDetail = true)const</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              stringstream
ss;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              ss
&lt;&lt; &quot;\t</span><span style='color:#00B0F0'>设备<span lang=EN-US>[&quot;
&lt;&lt; deviceCode &lt;&lt; &quot;] deviceParam:&quot; &lt;&lt;
deviceParam-&gt;ToString() &lt;&lt; &quot; rate: &quot; &lt;&lt; rate &lt;&lt;
&quot; _rate:&quot; &lt;&lt; _rate &lt;&lt; &quot; _DeviceState:&quot; &lt;&lt;
(int)_DeviceState &lt;&lt; endl;</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              if
(!withDetail)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     ss
&lt;&lt; &quot;\t</span><span style='color:#00B0F0'>共有通道<span lang=EN-US>
&quot; &lt;&lt; channels.size() &lt;&lt; &quot; </span>个<span lang=EN-US>&quot;
&lt;&lt; endl;</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              else</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                            ss
&lt;&lt; &quot;\t</span><span style='color:#00B0F0'>共有通道<span lang=EN-US>
&quot; &lt;&lt; channels.size() &lt;&lt; &quot; </span>个：<span lang=EN-US>&quot;
&lt;&lt; endl;</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                            CHtmlDoc::CHtmlTable2
table;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                            ToTable(protocolCode,
table, false);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                            ss
&lt;&lt; table.MakeTextTable() &lt;&lt; endl;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                            LockedList&lt;WriteInfo
&gt;* pWriteList = (LockedList&lt;WriteInfo &gt;*) &amp; writeList;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                            ss
&lt;&lt; &quot;\t</span><span style='color:#00B0F0'>待写入<span lang=EN-US> &quot;
&lt;&lt; pWriteList-&gt;locked_size() &lt;&lt; &quot; </span>个：<span
lang=EN-US>&quot; &lt;&lt; endl;</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                            if
(pWriteList-&gt;locked_size() &gt; 0)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                            {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                                   CHtmlDoc::CHtmlTable2
table;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                                   table.AddCol(&quot;uid&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                                   table.AddCol(&quot;c&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                                   table.AddCol(&quot;v&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                                   pWriteList-&gt;lock();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                                   for
(auto v : pWriteList-&gt;getForForeach())</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                                   {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                                          table.AddLine();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                                          table.AddData(v.uid);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                                          table.AddData(v.channelNo);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                                          table.AddData(v.value);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                                   }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                                   pWriteList-&gt;unlock();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                                   ss
&lt;&lt; table.MakeTextTable() &lt;&lt; endl;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                            }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              return ss.str();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>};</span></p>

<p class=MsoNormal><span lang=EN-US>       </span>待写入的列表由平台下发指令产生，协议需要解读数据并正确发送给设备。</p>

<p class=MsoNormal><span lang=EN-US>       </span>上次全部采集的时间和未处理的事件由协议酌情处理，<span
lang=EN-US>Modbus</span>协议是完整处理的例子。</p>

<p class=MsoNormal><span lang=EN-US>       </span>每个设备包含一组通道。</p>

<h3><a name="_Toc197459681"><span lang=EN-US>2.1.4<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=EN-US>Channel</span></a></h3>

<p class=MsoNormal style='text-indent:21.0pt'>通道对应一个可采集的数据，具有数据类型、长度等多种属性，以及多个采集控制参数。</p>

<p class=MsoNormal style='text-indent:21.0pt'>通道定义如下：</p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>class Channel</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>{</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>public:</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       int channelNo
= 0;//</span><span style='color:#00B0F0'>通道号，唯一标识一个通道，与外部交互时可能用<span
lang=EN-US>channelNo</span>或<span lang=EN-US>paramCode</span>来标识通道</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       string
channelComment;//</span><span style='color:#00B0F0'>通道注释</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       string
paramCode;//</span><span style='color:#00B0F0'>点位编码，唯一标识一个通道</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       string
paramName;//</span><span style='color:#00B0F0'>名称</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       string
dataType;//</span><span style='color:#00B0F0'>有<span lang=EN-US>ushort short
ubyte byte uint int ulong long float double boolean</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       int dataLength
= 0;//</span><span style='color:#00B0F0'>字符串和数组使用（数组尚未支持）</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       string
charsetCode;//</span><span style='color:#00B0F0'>字符串编码<span lang=EN-US> gbk
utf-8</span>，<span lang=EN-US>ChannelValue</span>存储的是原始数据，也就是这个编码的数据，显示时要转换为程序所需的编码，与平台交互则需要转换为协商的编码，一般是<span
lang=EN-US>utf-8</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       int
processType = 0;//</span><span style='color:#00B0F0'>操作类型<span lang=EN-US>1-</span>可读<span
lang=EN-US> 2-</span>可写<span lang=EN-US> 3-</span>可读写</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       int
collectorRate = 0;//</span><span style='color:#00B0F0'>采集频率，毫秒，或变化百分比，或依赖的<span
lang=EN-US>channelNo</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       ReportStrategy
reportStrategy;//</span><span style='color:#00B0F0'>上报策略<span lang=EN-US> 1-</span>按采集频率上报<span
lang=EN-US> 2-</span>变化上报<span lang=EN-US> 3-</span>监听上报<span lang=EN-US>(</span>尚未支持<span
lang=EN-US>) 4-</span>条件上报（尚未支持） <span lang=EN-US>5-</span>依赖上报（随<span
lang=EN-US>dependParam</span>上报）<span lang=EN-US>6-</span>变化触发全量</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       string
dependParamCode = &quot;&quot;;//</span><span style='color:#00B0F0'>依赖的点位编码，会转换为<span
lang=EN-US>channelNo</span>放在<span lang=EN-US>collectorRate</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       string
transferRuleStr;//</span><span style='color:#00B0F0'>字节顺序<span lang=EN-US>ABCD</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       IChannelParam*
pChannelParam;//</span><span style='color:#00B0F0'>通道的自定义参数</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       bool _changed
= false;//</span><span style='color:#00B0F0'>检测到数据改变（仅对需要检测变化的类型）</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       bool
_new_report = false;//</span><span style='color:#00B0F0'>新上报值（即数据需要放入上报数据包）</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>private:</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       ChannelValue
_value;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       CMyTime
_valueTime;//</span><span style='color:#00B0F0'>读取的时间</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       ChannelState
_ChannelState = ChannelState::DEFAULT;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       ChannelValue
_writeValue;//</span><span style='color:#00B0F0'>此值有效时将执行写入，写入完成后状态写入<span
lang=EN-US>_ChannelWriteState</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       CMyTime
_writeTime;//</span><span style='color:#00B0F0'>写入的时间</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       ChannelWriteState
_ChannelWriteState = ChannelWriteState::DEFAULT;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>public:</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       Channel(IChannelParam*
p) :pChannelParam(p) {}</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       void
SetChannelState(ChannelState state) { _ChannelState = state; }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       int
GetChannelState()const { return (int)_ChannelState; }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       bool
HasValue()const { return _value.bHasValue; }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       ChannelValue&amp;
GetValue() { return _value; }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       CMyTime
const&amp; GetValueTime()const { return _valueTime; }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       void
SetValue(string const&amp; value)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              _value._strValue
= value;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              _value.bHasValue
= true;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              _valueTime.SetCurrentTime();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       void
SetValueFromBuffer(uint16_t* regBuffer)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              _value.ChannelValue_LoadFromBuffer(dataType,
transferRuleStr, dataLength, regBuffer);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              _valueTime.SetCurrentTime();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       int
GetChannelWriteState()const { return (int)_ChannelWriteState; }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       bool
HasWriteValue()const { return _writeValue.bHasValue; }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       ChannelValue&amp;
GetWriteValue() { return _writeValue; }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       void
SetWriteValue(string const&amp; dataType, string const&amp; charset, string
const&amp; value)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              _writeValue.ChannelValue_SetWriteValue(dataType,
charsetCode, value);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              _ChannelWriteState
= ChannelWriteState::DEFAULT;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       void
FinishWriteValue(bool succeed)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              if
(succeed)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     _writeValue.bHasValue
= false;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     _writeTime.SetCurrentTime();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     _ChannelWriteState
= ChannelWriteState::OK;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              else</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     _ChannelWriteState
= ChannelWriteState::WRITE_ERROR;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       string
ProcessTypeStr()const</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              if (1
== processType)return &quot;</span><span style='color:#00B0F0'>只读<span
lang=EN-US>&quot;;</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              else if
(2 == processType)return &quot;</span><span style='color:#00B0F0'>只写<span
lang=EN-US>&quot;;</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              else if
(3 == processType)return &quot;</span><span style='color:#00B0F0'>读写<span
lang=EN-US>&quot;;</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              else</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     stringstream
ss;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     ss
&lt;&lt; processType;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     return
ss.str();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       bool
CanRead()const</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              return
1 == processType || 3 == processType;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       bool
CanWrite()const</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              return
2 == processType || 3 == processType;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       string
ToString()const</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              stringstream
ss;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              ss
&lt;&lt; &quot;\t\t&quot; &lt;&lt; channelNo &lt;&lt; &quot; : &quot; &lt;&lt;
channelComment &lt;&lt; &quot; : &quot; &lt;&lt; paramCode &lt;&lt; &quot; :
&quot; &lt;&lt; dataType &lt;&lt; &quot; &quot; &lt;&lt; dataLength &lt;&lt;
&quot; &quot; &lt;&lt; pChannelParam-&gt;_ToString() &lt;&lt; &quot;
processType: &quot; &lt;&lt; processType</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     &lt;&lt;
&quot; s:&quot; &lt;&lt; static_cast&lt;int&gt;(_ChannelState) &lt;&lt; &quot;
v:&quot; &lt;&lt; _value.ChannelValue_ShowValue(dataType, charsetCode)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     &lt;&lt;
&quot; w:&quot; &lt;&lt; _writeValue.ChannelValue_ShowValue(dataType,
charsetCode) &lt;&lt; &quot; ws:&quot; &lt;&lt;
static_cast&lt;int&gt;(_ChannelWriteState);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              return
ss.str();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       void
AddHtmlTalbeCols(string const&amp; protocolCode, CHtmlDoc::CHtmlTable2&amp;
table, bool bEdit)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.SetColFormInput(table.AddCol(&quot;channelNo&quot;,
CHtmlDoc::CHtmlDoc_DATACLASS_RIGHT), 4, true);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.SetColFormInput(table.AddCol(&quot;paramCode&quot;),
16);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.SetColFormInput(table.AddCol(&quot;paramName&quot;),
16);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.AddCol(&quot;channelComment&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.SetColFormInput2(table.AddCol(&quot;</span><span
style='color:#00B0F0'>数据类型<span lang=EN-US>&quot;), 8, &quot;float uint boolean
string ushort&quot;);</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.SetColFormInput(table.AddCol(&quot;</span><span
style='color:#00B0F0'>长度<span lang=EN-US>&quot;,
CHtmlDoc::CHtmlDoc_DATACLASS_RIGHT), 2);</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              if
(pChannelParam)pChannelParam-&gt;AddHtmlTalbeCols(protocolCode, table, bEdit);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              if
(!bEdit)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     table.AddCol(&quot;s&quot;,
CHtmlDoc::CHtmlDoc_DATACLASS_RIGHT);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     table.AddCol(&quot;</span><span
style='color:#00B0F0'>值<span lang=EN-US>&quot;,
CHtmlDoc::CHtmlDoc_DATACLASS_RIGHT);</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     table.AddCol(&quot;v&quot;,
CHtmlDoc::CHtmlDoc_DATACLASS_RIGHT);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.SetColFormInput(table.AddCol(&quot;</span><span
style='color:#00B0F0'>字符集<span lang=EN-US>&quot;,
CHtmlDoc::CHtmlDoc_DATACLASS_RIGHT), 8);</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.SetColFormInput2(table.AddCol(&quot;pT&quot;,
CHtmlDoc::CHtmlDoc_DATACLASS_RIGHT), 4, &quot;</span><span style='color:#00B0F0'>只读
读写 只写<span lang=EN-US>&quot;);</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.SetColFormInput(table.AddCol(&quot;</span><span
style='color:#00B0F0'>采集间隔<span lang=EN-US>&quot;,
CHtmlDoc::CHtmlDoc_DATACLASS_RIGHT), 6);</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.SetColFormInput2(table.AddCol(&quot;</span><span
style='color:#00B0F0'>上报策略<span lang=EN-US>&quot;,
CHtmlDoc::CHtmlDoc_DATACLASS_RIGHT), 4, &quot;1-</span>周期采集<span lang=EN-US> 2-</span>变化上报<span
lang=EN-US> 5-</span>依赖上报<span lang=EN-US> 6-</span>变化全报<span lang=EN-US>&quot;);</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.SetColFormInput2(table.AddCol(&quot;</span><span
style='color:#00B0F0'>字节序<span lang=EN-US>&quot;), 4, &quot;ABCD CDAB BADC
DCBA&quot;);</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              if
(!bEdit)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     table.AddCol(&quot;s&quot;,
CHtmlDoc::CHtmlDoc_DATACLASS_RIGHT);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     table.AddCol(&quot;</span><span
style='color:#00B0F0'>写<span lang=EN-US>&quot;,
CHtmlDoc::CHtmlDoc_DATACLASS_RIGHT);</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     table.AddCol(&quot;w&quot;,
CHtmlDoc::CHtmlDoc_DATACLASS_RIGHT);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       void
AddToHtmlTableLine(string const&amp; protocolCode, CHtmlDoc::CHtmlTable2&amp;
table, bool bEdit)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.AddData(channelNo);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.AddData(paramCode);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.AddData(paramName);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.AddData(ReportStrategy_DEPEND
== reportStrategy.reportStrategy ? channelComment + &quot; &quot; + dependParamCode
: channelComment);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.AddData(dataType);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.AddData(dataLength);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              pChannelParam-&gt;AddToHtmlTableLine(protocolCode,
table, bEdit);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              if
(!bEdit)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     table.AddData(static_cast&lt;int&gt;(_ChannelState));</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     table.AddData(_value.ChannelValue_ShowValue(dataType,
charsetCode));</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     table.AddData(_valueTime.hasTime()
? _valueTime.GetTimeSpanS() : -1);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.AddData(charsetCode);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.AddData(ProcessTypeStr());</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.AddData(collectorRate);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.AddData(reportStrategy.ToString());</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              table.AddData(transferRuleStr);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              if
(!bEdit)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     table.AddData(static_cast&lt;int&gt;(_ChannelWriteState));</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     table.AddData(_writeValue.ChannelValue_ShowValue(dataType,
charsetCode));</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>                     table.AddData(_writeTime.hasTime()
? _writeTime.GetTimeSpanS() : -1);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>};</span></p>

<p class=MsoNormal><span lang=EN-US>       </span>通道号是一个顺序号，一些设备可以导出配置，如昆仑的触摸屏可以导出<span
lang=EN-US>CSV</span>文件，网关可以直接读取导出的<span lang=EN-US>CSV</span>文件，顺序号可以和<span
lang=EN-US>CSV</span>文件的行对应。</p>

<p class=MsoNormal><span lang=EN-US>       </span>与平台交互时使用<span lang=EN-US>paramCode</span>作为通道唯一标识。</p>

<p class=MsoNormal><span lang=EN-US>       </span>这个类的大部分内容是为<span lang=EN-US>Modbus</span>协议设计的，其他协议可以使用“<span
lang=EN-US>IChannelParam* pChannelParam</span>”来处理自定义参数。</p>

<h2><a name="_Toc197459682"><span lang=EN-US>2.2<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=EN-US>IProtocol</span>协议接口</a></h2>

<h3><a name="_Toc197459683"><span lang=EN-US>2.2.1<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>概述</a></h3>

<p class=MsoNormal style='margin-left:21.0pt'>此接口由协议驱动动态库的入口点返回给主程序使用。</p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>//</span><span
style='color:#00B0F0'>协议接口</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>class IProtocol</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>{</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>public:</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       std::string
m_ProtocolCode;//</span><span style='color:#00B0F0'>协议代码</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       std::string
m_DriverFile;//</span><span style='color:#00B0F0'>驱动文件名</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       bool
m_isSerialPort;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       InterfaceDeviceConfig*
m_pInertfaceDevice = nullptr;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>public:</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       IProtocol(char
const* code, bool isSerialPort) :m_ProtocolCode(code),
m_isSerialPort(isSerialPort) {}</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>返回协议参数接口指针供框架调用</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual
IProtocolParam* getIProtocolParam() = 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>返回设备参数接口指针供框架调用，每个协议服务对象实例可能包含多个设备</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual
IDeviceParam* getIDeviceParam(char const* deviceCode) = 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>返回通道参数接口指针供框架调用，每个设备包含多个通道</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual
IChannelParam* getIChannelParam(char const* deviceCode, int channelNo) = 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>初始化</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual bool
ProtoSvrInit(InterfaceDeviceConfig* p) = 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>在设备配置加载之后执行</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual bool
OnAfterLoadDeviceConfig(Device* pDevice) = 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>卸载</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual bool
ProtoSvrUnInit() = 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>析构</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual
~IProtocol() {}</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>工作函数，由定时器激活，如果函数内部自己做循环不会退出，激活动作没有实际影响</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual void
protocol_process_job() = 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>定时器函数，在激活工作线程之前执行</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual void
protocol_process_timer_job() = 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>private:</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       map&lt;string,
map&lt;int, IChannelParam*&gt; &gt; m_device_channelparams;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>};</span></p>

<p class=MsoNormal><span lang=EN-US>       </span>必须实现所有未定义的虚函数。</p>

<h3><a name="_Toc197459684"><span lang=EN-US>2.2.2<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>自定义参数</a></h3>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-size:16.0pt;
line-height:115%;font-family:"等线 Light";color:#0F4761'>三级参数：协议、设备、通道，分别由<span
lang=EN-US>IProtocolParam</span>、<span lang=EN-US>IDeviceParam</span>、<span
lang=EN-US>IChannelParam</span>定义，接口结构相似，主要包含一个加载配置接口和一个输出文本描述接口。<span
lang=EN-US>IChannelParam</span>还包括输出到表格的接口。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-size:16.0pt;
line-height:115%;font-family:"等线 Light";color:#0F4761'>框架对自定义参数的处理仅仅包括加载配置和输出文本（用于控制台或<span
lang=EN-US>Show</span>指令显示）。</span></p>

<h3><a name="_Toc197459685"><span lang=EN-US>2.2.3<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=EN-US>IProtocolParam</span></a></h3>

<p class=MsoNormal style='margin-left:21.0pt'>协议参数接口，定义如下：</p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>struct IProtocolParam</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>{</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>自定义参数的输出</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual
std::string _ToString()const { return &quot;&quot;; }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>从配置<span lang=EN-US>json</span>中加载</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual bool
LoadConfig(InterfaceDeviceConfig* pInterface, cJSON* cjson_resolvePropertyMap) {
return true; }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>通用</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       int rate =
0;//</span><span style='color:#00B0F0'>每多少毫秒采集一次，此值不能高于所有通道设置的值</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       int _rate =
0;//</span><span style='color:#00B0F0'>实际使用的值，由数采服务设置</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       std::string
ToString()const</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              std::stringstream
ss;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              ss
&lt;&lt; &quot; rate:&quot; &lt;&lt; rate &lt;&lt; &quot; _rate:&quot; &lt;&lt;
_rate &lt;&lt; std::endl;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              ss
&lt;&lt; _ToString() &lt;&lt; std::endl;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              return
ss.str();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>};</span></p>

<p class=MsoNormal><span lang=EN-US>       </span>配置加载时传入设备接口对象指针，可以读取或修改对象的属性，传入的<span
lang=EN-US>json</span>对应配置文件的“<span lang=EN-US>resolvePropertyMap</span>”对象。</p>

<p class=MsoNormal><span lang=EN-US>       </span>如果协议处理函数自己做循环处理，不退出，可以无视通用参数<span
lang=EN-US>rate</span>。通用参数已经由框架处理，注意，自定义参数使用的配置项名称尽量不要和通用参数冲突。</p>

<h3><a name="_Toc197459686"><span lang=EN-US>2.2.4<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=EN-US>IDeviceParam</span></a></h3>

<p class=MsoNormal style='margin-left:21.0pt'>设备参数接口如下：</p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>class IDeviceParam</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>{</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>public:</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>自定义参数的输出</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual
std::string _ToString()const { return &quot;&quot;; }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>从配置<span lang=EN-US>json</span>中加载</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual bool
LoadConfig(InterfaceDeviceConfig* pInterface, cJSON* cjson_confTabs_item) {
return true; }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       std::string
ToString()const</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       {</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              std::stringstream
ss;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              ss
&lt;&lt; _ToString() &lt;&lt; std::endl;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>              return
ss.str();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       }</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>};</span></p>

<p class=MsoNormal><span lang=EN-US>       </span>更简单，连一个通用参数都没有。</p>

<p class=MsoNormal><span lang=EN-US>       </span>配置加载时传入的参数为设备对象指针，<span
lang=EN-US>json</span>则为对应的<span lang=EN-US>confTabs</span>数组的一个成员。</p>

<h3><a name="_Toc197459687"><span lang=EN-US>2.2.5<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=EN-US>IChannelParam</span></a></h3>

<p class=MsoNormal style='margin-left:21.0pt'>通道参数接口如下：</p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>class IChannelParam</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>{</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>public:</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual
~IChannelParam() {}</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>自定义参数的输出</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual
std::string _ToString()const = 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>从配置<span lang=EN-US>json</span>中加载</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual bool
LoadConfig(string const&amp; protocolCode, cJSON*
cjson_resolveParamConfigVOList_item) = 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>输出表格头</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual void
AddHtmlTalbeCols(string const&amp; protocolCode, CHtmlDoc::CHtmlTable2&amp;
table, bool bEdit) = 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       //</span><span
style='color:#00B0F0'>输出表格数据</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>       virtual void
AddToHtmlTableLine(string const&amp; protocolCode, CHtmlDoc::CHtmlTable2&amp;
table, bool bEdit) = 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#00B0F0'>};</span></p>

<p class=MsoNormal><span lang=EN-US>       </span>配置加载接口仅传入了协议代码，可以根据这个做适当的区分，传入的<span
lang=EN-US>json</span>对应通道的参数。</p>

<p class=MsoNormal><span lang=EN-US>       </span>输出表格的接口用于表格输出，框架先调用<span
lang=EN-US>AddHtmlTalbeCols</span>输出表格头，也就是添加对应的列，然后逐行调用<span lang=EN-US>AddToHtmlTableLine</span>输出列数据，注意表格头和输出数据的个数必须严格一致。</p>

</div>

</body>

</html>
